<?php namespace ProcessWire;

require_once(dirname(__FILE__) . '/FormBuilderProcessorAction.php');

/**
 * ProcessWire Form Builder
 *
 * Provides the capability to build, edit and embed forms on your ProcessWire
 * powered site. This particular module is a bridge to the Form Builder library
 * found in FormBuilderMain.php, but also serves as the $forms API variable
 * and handles embed options A and B via hooks. 
 *
 * Copyright (C) 2020 by Ryan Cramer Design, LLC
 * 
 * THIS IS A COMMERCIAL PRO MODULE - DO NOT DISTRIBUTE
 *
 * @property string $filesPath Path for file attachments
 * @property array $embedFields Fields allowed for easy-embed
 * @property string $embedTag Easy embed tag
 * @property string $embedCode
 * @property int|bool $useRoles Enable access control?
 * @property string $licenseKey 
 * @property string $akismetKey
 * @property array $inputfieldClasses Inputfield classes allowed for form fields
 * @property string $csvDelimiter Delimeter to use for CSV files
 * @property bool $csvUseBOM Include a UTF-8 BOM at the beginning of CSV files?
 * @property string $fromEmail Default from email for sent emails
 * @property string $mailer WireMail mailer to use for sending email, 'WireMail' to force native PHP mail(), or blank for auto-detect. 
 * @property int $lastMaint Timestamp of the last time maintenance was performed
 * 
 * @method FormBuilderForm|array|null load($id)
 * @method bool save(FormBuilderForm $form)
 * @method FormBuilderRender render($form, array $vars = array())
 * @method FormBuilderForm addNew($formName)
 * @method bool delete(FormBuilderForm $form)
 * @method string getFilesPath($tmp = false, $create = true)
 * 
 * @todo move FormBuilderMain into this class and drop FormBuilderMain
 * @todo better solution for form action attribute when trailing slash disabled for template (embed C)
 * 
 * 
 * 
 */

class FormBuilder extends WireData implements Module, ConfigurableModule, \IteratorAggregate, \Countable {

	public static function getModuleInfo() {
		return array(
			'title' => 'Form Builder', 
			'summary' => 'Create or edit forms and manage submitted entries.',
			'version' => 46, 
			'autoload' => true,
			'singular' => true,
			'installs' => array('ProcessFormBuilder', 'InputfieldFormBuilderFile'),
		);
	}
	
	const requireTemplateVersion = 2;
	
	const requireSchemaVersion = 2;
	
	const allowSummaryPage = false;
	
	const allowPageNav = false;
	
	/**
	 * form-builder.php template file version
	 *
	 * @var int
	 *
	 */
	protected $templateVersion = 0;

	/**
	 * Instance of FormBuilderMain, serves as $forms API variable
	 *
	 */
	protected $forms = null;
	
	/**
	 * Form permission names
	 *
	 * @var array
	 *
	 */
	protected $formPermissionNames = array(
		'form-submit', // Roles that can view and submit this form on your site
		'form-list', // Roles that can see the form in the admin
		'form-edit', // Roles that can edit this form
		'form-delete', // Roles that can delete this form
		'entries-list', // Roles that can view and list entries for this form
		'entries-edit', // Roles that can edit entries for this form
		'entries-delete', // Roles that can delete entries for this form
		'entries-page', // Roles that can send entries to pages, when applicable
		'entries-resend', // Roles that can re-send an entry, when applicable
	);

	/**
	 * Construct the Form Builder, include required classes and set default config vars
	 *
	 */
	public function __construct() {

		require_once(dirname(__FILE__) . '/FormBuilderMain.php');

		// default config variables
		$this->set('embedTag', FormBuilderMain::name);
		$this->set('embedCode', FormBuilderMain::embedCode); 
		$this->set('embedFields', array());
		$this->set('licenseKey', '');
		$this->set('csvDelimiter', ',');
		$this->set('csvUseBOM', false);
		$this->set('useRoles', 0);
		$this->set('fromEmail', '');
		$this->set('yeKes', 'necil');
		$this->set('mailer', '');
		$this->set('schemaVersion', 0);
		$this->set('lastMaint', 0);

		// the following line is redundant with the one in wired(), this is intentional
		$this->set('filesPath', $this->wire()->config->paths->cache . FormBuilderMain::name . '/'); 
	}

	/**
	 * Wired to API
	 * 
	 */
	public function wired() {
		// default filesPath
		$this->set('filesPath', $this->wire()->config->paths->cache . FormBuilderMain::name . '/');
		$this->addHook('ProcessWire::finished', $this, 'finished');
		$this->wire('forms', $this);
		parent::wired();
	}

	/**
	 * Init for Module interface
	 *
	 */
	public function init() { }

	/**
	 * Establish hooks where appropriate
	 *
	 */
	public function ready() {

		/** @var Page $page */
		$page = $this->wire('page'); 
		
		if((int) $this->get('schemaVersion') < self::requireSchemaVersion) {
			require_once(dirname(__FILE__) . '/FormBuilderEntries.php');
			$verbose = $page->template == 'admin' && $this->wire('user')->isSuperuser();
			try {
				FormBuilderEntries::_upgrade($this->wire('database'), $verbose);
				$data = $this->wire('modules')->getModuleConfigData($this);
				$data['schemaVersion'] = self::requireSchemaVersion;
				$this->wire('modules')->saveModuleConfigData($this, $data);
			} catch(\Exception $e) {
				if($verbose) $this->warning($e->getMessage());
			}
		}
		
		if($page->template != 'admin') {
			if(count($this->embedFields)) {
				$this->addHookAfter('FieldtypeTextarea::formatValue', $this, 'hookFormatValue');
			}
		}
		
	}

	/**
	 * Called when request has finished
	 * 
	 */
	public function finished() {
		if(time() - $this->lastMaint > 86400) {
			// perform maintenance once daily
			$this->maintenance();
			$data = $this->wire('modules')->getModuleConfigData($this);
			$this->lastMaint = time();
			$data['lastMaint'] = $this->lastMaint;
			$this->wire('modules')->saveModuleConfigData($this, $data);
		}
	}
	
	/**
	 * Placeholder function for FormBuilderMain variable to ensure it's only instantiated when needed
	 *
	 * @return FormBuilderMain
	 *
	 */
	public function forms() {
		if(is_null($this->forms)) $this->forms = new FormBuilderMain($this->wire('wire'), $this->filesPath);
		return $this->forms;
	}

	/**
	 * Hook into FieldtypeTextarea::formatValue where we do search/replace on form-builder embed tags
	 * 
	 * @param HookEvent $event
	 *
	 */
	public function hookFormatValue($event) {
		$field = $event->arguments[1];
		if(!in_array($field->id, $this->embedFields)) return;
		$value = $event->return;
		$embedTag = $this->embedTag;
		if(strpos($value, ">$embedTag/") === false) return;
		if(!preg_match_all('!<([^>]+)>' . $embedTag . '/([-_a-zA-z0-9]+)\s*</\\1>!', $value, $matches)) return;
		foreach($matches[0] as $key => $tag) {
			$iframe = $this->embed($matches[2][$key]);
			$value = str_replace($tag, $iframe, $value);               
		}
		$event->return = $value;
	}
	
	/**
	 * Convert given value to FormBuilderForm if it isn’t already
	 *
	 * Throws FormBuilderException if given value cannot be converted to a FormBuilderForm
	 *
	 * @param FormBuilderForm|string|int $form
	 * @param bool $throw Throw exception if form not found? If false, method returns false rather than throwing Exception (default=true)
	 * @return FormBuilderForm
	 * @throws FormBuilderException
	 *
	 */
	public function form($form, $throw = true) {
		return $this->forms()->form($form, $throw);
	}

	/**
	 * Convert given value to form ID if is isn’t already
	 *
	 * @param int|string|FormBuilderForm $formID
	 * @param bool $throw Throw exception if cannot resolve to form ID or does not exist? (default=true)
	 * @return int
	 *
	 */
	public function formID($formID, $throw = true) {
		return $this->forms()->formID($formID, $throw);
	}

	/**
	 * Convert given value to form name if is isn’t already
	 *
	 * @param int|string|FormBuilderForm $formName
	 * @param bool $throw Throw exception if cannot resolve to form name or does not exist? (default=true)
	 * @return int
	 *
	 */
	public function formName($formName, $throw = true) {
		return $this->forms()->formName($formName, $throw);
	}

	/**
	 * Given an entry array or ID return the FormBuilderForm object that it belongs to
	 *
	 * @param array|int $entry Entry array or ID (int)
	 * @return bool|FormBuilderForm Returns FormBuilderForm object or boolean false if not found
	 * @since 0.4.4
	 *
	 */
	public function entryToForm($entry) {
		return $this->forms()->entryToForm($entry);
	}

	/**
	 * Get a form entry by ID
	 *
	 * @param int $entryID The ID of the entry you want to get
	 * @param FormBuilderForm|string|int $form Form object, name or ID, or omit to detect automatically from entry ID
	 * @return array|bool Returns entry array on success or boolean false if not found
	 * @since 0.4.4
	 *
	 */
	public function getEntry($entryID, $form = 0) {
		return $this->forms()->getEntry($entryID, $form);
	}

	/**
	 * Save a form entry
	 *
	 * This is the same as $form->entries()->save($entry); except that the $form object can be
	 * determined automatically when saving existing entries.
	 *
	 * @param array $entry
	 * @param int|string|FormBuilderForm $form Form or omit to determine automatically from entry
	 * @return bool|int Returns saved entry ID on success, boolean false on fail
	 * @throws FormBuilderException|\Exception
	 * @since 0.4.4
	 *
	 */
	public function saveEntry(array $entry, $form = 0) {
		return $this->forms()->saveEntry($entry, $form);
	}

	/**
	 * Find form entries across all forms (or on specific form if specified)
	 *
	 * ~~~~~
	 * // find entries having phrase 'foo bar'
	 * $entries = $forms->findEntries('foo bar');
	 * 
	 * // find entries having words 'foo' and 'bar'
	 * $entries = $forms->findEntries('foo bar', '~='); 
	 * ~~~~~
	 *
	 * For more specific searches use `$form->entries()->find('selector string');`
	 *
	 * @param string $keywords Phrase or keywords to find
	 * @param string $operator Operator to use for search (default='*=')
	 * @param int|string|FormBuilderForm $form Optionally limit search to given form id, name or object
	 * @return array
	 * @throws FormBuilderException
	 * @since 0.4.4
	 *
	 */
	public function findEntries($keywords, $operator = '*=', $form = 0) {
		return $this->forms()->findEntries($keywords, $operator, $form);
	}

	/**
	 * Given a form ID or name, returns true if is used by a form, false if not
	 *
	 * @param int|string $id May be form ID or form name
	 * @return bool
	 *
	 */
	public function isForm($id) {
		return $this->forms()->isForm($id);
	}
	
	public function isValidLicense($k = '') {
		return $this->forms()->isValidLicense($k);
	}

	/**
	 * Retrieve a form by $id, $name or specify boolean true to return all forms
	 *
	 * @param int|string|bool May be form ID, form name or boolean true to return array of all forms indexed by name
	 * @return FormBuilderForm|array|null Returns $form (or array of forms) on success, or NULL on failure to load form
	 *
	 */
	public function ___load($id) {
		return $this->forms()->load($id);
	}

	/**
	 * Load all forms
	 * 
	 * @return array Array of FormBuilderForm instances indexed by form name
	 * 
	 */
	public function loadAll() {
		return $this->load(true); 
	}

	/**
	 * Save the given $form 
	 *
	 * @param FormBuilderForm $form
	 * @return bool Returns true on success, false on failure
	 *
	 */
	public function ___save(FormBuilderForm $form) {
		return $this->forms()->save($form); 
	}

	/**
	 * Add a new form with the given name
	 *
	 * @param string $formName Using characters: -_a-z0-9
	 * @return FormBuilderForm
	 *
	 */
	public function ___addNew($formName) {
		$formName = $this->sanitizer->pageName($formName, Sanitizer::translate); 
		return $this->forms()->addNew($formName); 
	}

	/**
	 * Delete the given $form 
	 *
	 * @param FormBuilderForm $form Form to delete
	 * @return bool Returns true on success, false on failure
	 *
	 */
	public function ___delete(FormBuilderForm $form) {
		return $this->forms()->delete($form); 
	}

	/**
	 * Get the name of a form
	 * 
	 * @param int|FormBuilderForm|InputfieldForm $id
	 * @return string
	 * @deprecated use formName() method instead
	 * 
	 */
	public function getFormName($id) {
		return $this->forms()->formName($id, false);
	}

	/**
	 * Get names of all forms (indexed by form ID)
	 * 
	 * @param int $id Optional form ID to get the name for only form having this ID (default=0)
	 * @return array|string
	 * @since 0.4.0
	 * 
	 */
	public function getFormNames($id = 0) {
		return $this->forms()->getFormNames($id);
	}

	/**
	 * Retrieve a config variable or a form, depending on the key
	 * 
	 * @param string $key
	 * @return mixed
	 *
	 */
	public function get($key) {
		$value = parent::get($key);
		if($key != 'name' && is_null($value)) if($this->isForm($key)) $value = $this->load($key);
		return $value;
	}

	/**
	 * Make this module iterable, as required by the IteratorAggregate interface
	 *
	 */
	public function getIterator() {
		return new \ArrayObject($this->forms()->getFormNames()); 
	}

	/**
	 * Get the embed code for a given form
	 *
	 * @param int|string|FormBuilderForm Form ID, name or instance to embed
	 * @param array $vars Optional array of variables to send as GET vars to the embedded form. When used, overrides use of actual GET variables.
	 * @return string Embed code or error message
	 *
	 */
	public function embed($formName, array $vars = null) {

		$out = "\n<!-- " . FormBuilderMain::RCD . " -->\n"; 
	
		$form = $this->form($formName, false);
		$formName = $form->name;
		
		if(!$formName) return $out . $this->_('Form not found');
	
		$page = $this->pages->get("template=" . FormBuilderMain::name); 
		if(!$page->id) return $out . $this->_('Unable to find form-builder page'); 
		
		$queryString = $this->embedQuerystring($form, $vars);
		$httpUrl = $page->httpUrl . strtolower($formName) . '/' . $queryString;
		$httpsUrl = str_replace('http://', 'https://', $httpUrl); 
		$url = $page->url . strtolower($formName) . '/' . $queryString;
		if($this->wire('config')->https) $httpUrl = str_replace('http://', 'https://', $url);
		$embedCode = $this->embedCode;
		if(empty($embedCode)) $embedCode = FormBuilderMain::embedCode;
		
		return $out . str_ireplace(
			array('{url}', '{httpUrl}', '{httpsUrl}', '{name}'), 
			array($url, $httpUrl, $httpsUrl, $formName), 
			$embedCode
		);
	}

	/**
	 * Get the queryString to use with the embed URL for the allowPreset (GET variables) option
	 *
	 * @param FormBuilderForm|int|string $form
	 * @param array $vars Optional array of varibles you want in the query string, overrides use of GET variables.
	 * @return string queryString
	 *
	 */
	protected function embedQuerystring($form, array $vars = null) {

		$form = $this->form($form);
		$queryString = '';
		$maxlength = 1024*32; // max length for a query string

		if(is_null($vars)) {
			if(!$form->allowPreset || !count($this->input->get)) return $queryString;
			$vars = $this->input->get; 
			$allowUnknown = false;
		} else {
			// we allow any var name when manually specified
			$allowUnknown = true; 	
		}

		foreach($vars as $key => $value) {

			$name = strtolower($this->sanitizer->fieldName($key));
			if(!$allowUnknown) {
				$f = $form->getFieldByName($name); 
				if(!$f) continue; 
			}
	
			if(is_object($value)) {
				if($value instanceof PageArray) {
					$value = $value->explode('id'); 
				} else {
					$value = (string) $value; 
				}
			}

			if(is_array($value)) {
				foreach($value as $k => $v) {
					if(is_array($v)) continue; 
					if(is_int($k)) $queryString .= $name . '[]=';
						else $queryString .= $name . '[' . $this->sanitizer->fieldName($k) . ']=';
					$queryString .= urlencode($v) . '&';
				}
			} else {
				$queryString .= $name . '=' . urlencode($value) . '&';
			}
		}

		$len = strlen($queryString);

		if($len) {
			if($len > $maxlength) {
				// query string too long, abort
				$queryString = '';
			} else {
				// entity encode and finish it off
				$queryString = '?' . htmlentities(rtrim($queryString, '&'), ENT_QUOTES, 'UTF-8');
			}
		}


		return $queryString; 
	}

	/**
	 * Return number of forms here, per Countable interface
	 *
	 */
	public function count() {
		return $this->forms()->count();
	}

	/**
	 * Return the number of entries for the given form ID
	 * 
	 * @param int|string|FormBuilderForm $id
	 * @return int
	 *
	 */
	public function countEntries($id) {
		return $this->forms()->countEntries($id);
	}

	/**
	 * Return the JSON schema for the given form ID
	 * 
	 * @param int|string|FormBuilderForm $form
	 * @return string
	 *
	 */
	public function exportJSON($form) {
		return $this->forms()->exportJSON($form);
	}

	/**
	 * Import to form ID the given JSON schema
	 *
	 * @param int|string|FormBuilderForm $form
	 * @param string $json
	 * @return bool 
	 *
	 */
	public function importJSON($form, $json) {
		return $this->forms()->importJSON($form, $json);
	}

	/**
	 * Returns whether or not the given $name may be used or a form or field name
	 *
	 * @param string $name
	 * @return bool
	 *
	 */
	public function isReservedName($name) {
		return $this->forms()->isReservedName($name);
	}

	/**
	 * Return path that FormBuilder uses for storing files
	 *
	 * @param bool $tmp Get temporary path? (default=false)
	 * @param bool $create Create if not exists? (default=true)
	 * @return string
	 *
	 */
	public function ___getFilesPath($tmp = false, $create = true) {
		return $this->forms()->getFilesPath($tmp, $create);
	}

	/**
	 * Generate a transportable key for the given filename within a form and entry
	 *
	 * @param int|string|FormBuilderForm $formID
	 * @param int $entryID Or specify 0 if not yet an active entry
	 * @param string $filename
	 * @return bool|string Returns false on failure or string on success
	 *
	 */
	public function getFileKey($formID, $entryID, $filename) {
		return $this->forms()->getFileKey($formID, $entryID, $filename);
	}
	
	/**
	 * Retrieve a filename from a transportable key
	 *
	 * @param string $key Must be in the format given by getFileKey
	 * @return bool|string Returns boolean false on failure or full path+filename on success
	 *
	 */
	public function getFileFromKey($key) {
		return $this->forms()->getFileFromKey($key);
	}

	/**
	 * Return a URL where the given file can be viewed
	 *
	 * @param int|string|FormBuilderForm $formID
	 * @param int $entryID Or specify 0 if not yet an active entry
	 * @param string $filename
	 * @return bool|string Returns false on failure or URL on success
	 *
	 */
	public function getFileURL($formID, $entryID, $filename) {
		return $this->forms()->getFileURL($formID, $entryID, $filename);
	}

	/**
	 * Outputs the given file, must be located under getFilesPath()
	 *
	 * @param string $key Key representing the file to view (generated by getFileKey) 
	 * @throws Wire404Exception
	 *
	 */
	public function viewFile($key) {
		if(!$this->forms()->viewFile($key)) throw new Wire404Exception();
	}

	/**
	 * Check if the current user has the permission name for the given $form
	 *
	 * @param string $name Name of permission
	 * @param string|FormBuilderForm|int Form name, ID or object
	 * @return bool
	 * @throws FormBuilderException
	 *
	 */
	public function hasPermission($name, $form) {
		
		if(!in_array($name, $this->formPermissionNames, true)) {
			throw new FormBuilderException("Unknown permission name: $name"); 
		}

		$form = $this->form($form);
		$user = $this->wire()->user;

		if($user->isSuperuser() || $user->hasPermission('form-builder-admin')) return true; 
		if(!$this->useRoles && $name === 'form-submit') return true; 
		if(!$this->useRoles && $user->hasPermission('form-builder')) return true; 

		$roles = $form->roles;
		$allowed = false;

		// they are asking for a permission that is not form-specific
		if(count($roles) && !isset($roles[$name])) return false; 

		foreach($roles[$name] as $role) {
			if($user->hasRole($role)) {
				$allowed = true; 
				break;
			}
		}

		return $allowed; 	
	}

	/**
	 * Retrieve all themes or frameworks files
	 * 
	 * @param string $for Specify 'themes' or 'frameworks'
	 * @param bool $getDirs
	 * @return array
	 * 
	 */
	public function getHelpers($for, $getDirs = true) {
		return $this->forms()->getHelpers($for, $getDirs); 
	}
	
	/**
	 * Get path for 'themes' or 'frameworks' helpers
	 *
	 * @param string $for Either 'themes' or 'frameworks'
	 * @param string $item Optionaly framework or theme
	 * @return string
	 *
	 */
	public function helperPath($for, $item = '') {
		return $this->forms()->helperPath($for, $item);
	}

	/**
	 * Return the path where themes are stored
	 * 
	 * If the dir /site/templates/FormBuilder/themes/ exists, it will use that. 
	 * Otherwise it uses /site/modules/FormBuilder/themes/
	 * 
	 * @param string $theme Optionally specify the theme and it will be included in the path
	 * @return string
	 * 
	 */
	public function themesPath($theme = '') {
		return $this->forms()->themesPath($theme);
	}
	
	/**
	 * Return the path where frameworks are stored
	 *
	 * If the dir /site/templates/FormBuilder/frameworks/ exists, it will use that.
	 * Otherwise it uses /site/modules/FormBuilder/frameworks/
	 *
	 * @return string
	 *
	 */
	public function frameworksPath() {
		return $this->forms()->frameworksPath();
	}
	
	/**
	 * Return the URL where themes are stored
	 *
	 * If the dir /site/templates/FormBuilder/themes/ exists, it will use that.
	 * Otherwise it uses /site/modules/FormBuilder/themes/
	 *
	 * @param string $theme Optionally specify the theme and it will be included in the url 
	 * @return string
	 *
	 */
	public function themesURL($theme = '') {
		return $this->forms()->themesURL($theme);
	}
	
	/**
	 * Return the URL where frameworks are stored
	 *
	 * If the dir /site/templates/FormBuilder/frameworks/ exists, it will use that.
	 * Otherwise it uses /site/modules/FormBuilder/frameworks/
	 *
	 * @return string
	 *
	 */
	public function frameworksURL() {
		return $this->forms()->frameworksURL();
	}

	/**
	 * Get the framework used by the given $form
	 * 
	 * Also prepares the framework with it's config values populated
	 * 
	 * @param FormBuilderForm $form
	 * @return FormBuilderFramework|null
	 * 
	 */
	public function getFramework(FormBuilderForm $form) {
		return $this->forms()->getFramework($form); 
	}

	/**
	 * Returns a form embed key for matching request to response
	 *
	 * @param string $v
	 * @return string
	 *
	 */
	public function getEmbedVersion($v = '') {
		list($k,$l,$m) = array($v,'K','e');
		$y = $k === false ? "$m{$l}ys$m" : "y$m{$l}{$m}s";
		$k = $k ? $k : $this->get(strrev($this->$y) . strrev($y));
		if(!strlen($k) || substr_count($k, '.') < 2) return '';
		list($a,$b,) = explode('.', $k);
		list($a,$b,$c) = array(substr($a, -1), substr($b, 3), substr($b, 0, 1));
		$v = strtoupper($c . strrev($a . $b));
		return ctype_alnum($v) ? $v : '';
	}

	/**
	 * Render a form directly (embed method C)
	 * 
	 * @param string|FormBuilderForm $form
	 * @param array|Page $vars Optional associative array of variable names to pre-populated values, or Page to pull them from
	 * 	If providing a Page, then the form field names must match the Page field names. 
	 * @return FormBuilderRender
	 * @throws FormBuilderException
	 * 
	 */
	public function ___render($form, $vars = array()) {
		$form = $this->form($form);
		$this->loadHooksFile(); // in case this is called with embed method C
		$processor = null;
		if(!empty($vars)) {
			$processor = $form->processor();
			$inputfields = $processor->getInputfieldsForm();
			if(is_array($vars) && count($vars)) {
				foreach($vars as $name => $value) {
					$inputfield = $inputfields->getChildByName($name);
					if(!$inputfield) continue;
					$inputfield->attr('value', $value);
				}
			} else if($vars instanceof Page) {
				$page = $vars;
				foreach($inputfields->getAll() as $inputfield) {
					$name = $inputfield->attr('name');
					$value = $page->getUnformatted($name);
					if(!is_null($value)) $inputfield->attr('value', $value);
				}
			}
		}
		$render = new FormBuilderRender($form); 
		$form->setFbRender($render);
		if($processor) $processor->setFbRender($render);
		return $render; 
	}

	/**
	 * Load form from URL (for embed method a or b)
	 * 
	 * This is intended to be called only by site/templates/form-builder.php
	 * 
	 * @param bool $render Specify true to render the FormBuilderRender object rather than FormBuilderForm
	 * @return FormBuilderForm|FormBuilderRender|string
	 * @throws Wire404Exception
	 * 
	 */
	public function getFromURL($render = false) {
		
		$sanitizer = $this->wire('sanitizer');
		$input = $this->wire('input');
		$user = $this->wire('user');
		
		$this->loadHooksFile();

		// if view file requested, delegate to that function
		if($input->get('view_file')) $this->viewFile($input->get('view_file'));

		// identify which form is being requested
		// we don't allow loading forms by ID when user is not logged in,
		// so that a curious person can't track down all the forms by incrementing the ID
		$formName = $sanitizer->pageName($input->urlSegment1);
		if(ctype_digit("$formName") && $user->isGuest()) {
			return "<p>Forms rendered to guest users may not be loaded by ID. Please specify form name in URL instead.</p>";
		}

		if($formName) {
			// load and render the form
			$form = $this->load($formName);
		} else {
			// no form available
			$form = null;
		}

		if(!$form) {
			if($this->wire('page')->editable()) {
				return "<h2>Unknown form</h2>";
			} else {
				throw new Wire404Exception();
			}
		}
	
		if($render) return $this->render($form);
		return $form; 
	}

	/**
	 * Load the optional /site/templates/form-builder.inc hooks file
	 * 
	 */
	public function loadHooksFile() {
		static $loaded = false;
		if($loaded) return;
		// form-builder.inc is an optional include file you may create (in /site/templates/) if you want 
		// to init custom hook functions specific to Form Builder
		$hookFile = $this->wire('config')->paths->templates . 'form-builder.inc';
		if(is_file($hookFile)) {
			wireIncludeFile($hookFile);
		}
		$loaded = true;
	}

	/**
	 * Set the form-builder.php template version, to be called from form-builder.php
	 * 
	 * @param int $version
	 * 
	 */
	public function setTemplateVersion($version) {
		$this->templateVersion = (int) $version; 
	}

	/**
	 * Get the template version set from form-builder.php
	 * 
	 * @return int
	 * 
	 */
	public function getTemplateVersion() {
		return $this->templateVersion; 
	}

	/**
	 * Record a log entry for FormBuilder
	 * 
	 * @param int|string|FormBuilderForm|InputfieldForm $form
	 * @param string $str String to log
	 * @return WireLog
	 * 
	 */
	public function formLog($form, $str) {
		$formName = $form ? $this->formName($form, false) : '';
		if($formName) $str = "$formName: $str";
		$options = array('name' => 'form-builder');
		return $this->log($str, $options);
	}

	/**
	 * Perform form maintenance on all forms (or a specific form, if given)
	 * 
	 * @param FormBuilderForm|string|int Form, form name, or form ID (or omit for all forms)
	 * @return Number of entries deleted or modified from maintenance
	 * 
	 */
	public function maintenance($form = null) {
		
		$result = 0;
		$forms = $form ? array($this->form($form, false)) : $this->loadAll();
		
		foreach($forms as $form) {
			if(!$form instanceof FormBuilderForm) continue;
			/** @var FormBuilderForm $form */
			$days = (int) $form->entryDays;
			$daysPartial = (int) $form->partialEntryDays;
			$entries = $form->entries();
			
			if($days > 0) {
				$result += $entries->deleteOlderThan($days, 'DAYS', 'created', -1 * FormBuilderEntries::flagPartial);
			}
			if($daysPartial > 0) {
				$result += $entries->deleteOlderThan($daysPartial, 'DAYS', 'modified', FormBuilderEntries::flagPartial);
			}
		}
		
		return $result;
	}

	/**
	 * Configure the form builder
	 * 
	 * @param array $data
	 * @return InputfieldWrapper
	 *
	 */
	public static function getModuleConfigInputfields(array $data) {
		require_once(dirname(__FILE__) . '/FormBuilderConfig.php'); 
		$c = new FormBuilderConfig($data);
		return $c->getConfig();
	}

	/**
	 * Install the module and create the tables
	 *
	 */
	public function ___install() {
		$this->forms()->_install(); // tables
		require(dirname(__FILE__) . '/FormBuilderInstall.php'); 
		$installer = new FormBuilderInstall();
		$installer->install();
	}

	/**
	 * Uninstall the module
	 *
	 */
	public function ___uninstall() {
		$this->forms()->_uninstall(); // tables
		require(dirname(__FILE__) . '/FormBuilderInstall.php'); 
		$installer = new FormBuilderInstall();
		$installer->uninstall();
	}
	
	public function ___upgrade($fromVersion, $toVersion) {
		if($fromVersion < 36) {
			try {
				$this->wire('database')->exec('ALTER TABLE forms_entries MODIFY created DATETIME NOT NULL');
				$this->wire('database')->exec('ALTER TABLE forms_entries ADD INDEX created_forms_id (created, forms_id)'); 
				$this->message("Updated forms_entries DB schema for FormBuilder v$fromVersion to v$toVersion"); 
			} catch(\Exception $e) {
				$this->error($e->getMessage()); 
			}
		}
	}

}


